#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TG-–±–æ—Ç ¬´–≠–ª–µ–∫—Ç—Ä–æ–Ω UGC¬ª
‚Ä¢ /start ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ¬´üì¢ –ò–¥–µ—è / üí¨ –§–∏–¥–±–µ–∫¬ª
‚Ä¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –∏–¥–µ—é/—Ñ–∏–¥–±–µ–∫ ‚ûú –±–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –µ—ë –≤ –º–æ–¥-—á–∞—Ç
‚Ä¢ –≤ –º–æ–¥-—á–∞—Ç–µ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äì ¬´‚úÖ –ü—Ä–∏–Ω—è—Ç—å / ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å¬ª
‚Ä¢ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –∞–≤—Ç–æ—Ä—É
"""

import asyncio
import logging
import os
from typing import Dict

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, CallbackQuery,
    KeyboardButton, ReplyKeyboardMarkup,
    InlineKeyboardButton, InlineKeyboardMarkup,
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# --- –ù–ê–°–¢–†–û–ô–ö–ò ----------------------------------------------------------------
BOT_TOKEN   = os.getenv("BOT_TOKEN",   "PASTE_YOUR_TOKEN")
MOD_CHAT_ID = int(os.getenv("MOD_CHAT_ID", "-1001234567890"))  # —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä

logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")

bot  = Bot(BOT_TOKEN, parse_mode="HTML")
dp   = Dispatcher()

# —á—Ç–æ–±—ã –ø–æ callback data –ø–æ–ª—É—á–∏—Ç—å id –∞–≤—Ç–æ—Ä–∞
pending: Dict[str, int] = {}                 # callback_id ‚Üí user_id
# -----------------------------------------------------------------------------

def main_keyboard() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.add(
        KeyboardButton(text="üì¢ –ò–¥–µ—è"),
        KeyboardButton(text="üí¨ –§–∏–¥–±–µ–∫"),
    )
    kb.adjust(2)
    return kb.as_markup(resize_keyboard=True)

@dp.message(CommandStart())
async def start(m: Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥–µ–ª–∏—Å—å –∏–¥–µ–µ–π –∏–ª–∏ —Ñ–∏–¥–±–µ–∫–æ–º ‚Äì –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π üëá",
        reply_markup=main_keyboard()
    )

@dp.message(F.text.in_(["üì¢ –ò–¥–µ—è", "üí¨ –§–∏–¥–±–µ–∫"]))
async def choose_type(m: Message):
    tag = "idea" if m.text.startswith("üì¢") else "feedback"
    await m.answer(
        "–û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ. "
        "–Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∫–æ–º–∞–Ω–¥–µ ‚ú®"
    )
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π state —á–µ—Ä–µ–∑ message.chat_data
    await dp.storage.set_data(chat=m.chat.id, data={"tag": tag})

@dp.message()
async def idea(m: Message):
    data = await dp.storage.get_data(chat=m.chat.id)
    if "tag" not in data:
        return  # —é–∑–µ—Ä –ø—Ä–∏—Å–ª–∞–ª —á—Ç–æ-—Ç–æ –¥–æ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ ‚Äì –∏–≥–Ω–æ—Ä–∏–º
    tag = data["tag"]
    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π callback-id
    cb_id = f"{m.chat.id}_{m.message_id}"
    pending[cb_id] = m.chat.id

    # –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ –º–æ–¥-—á–∞—Ç
    caption = (
        f"<b>–ù–æ–≤–∞—è { '–∏–¥–µ—è' if tag=='idea' else '–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å' }</b>\n"
        f"–û—Ç: <a href='tg://user?id={m.from_user.id}'>{m.from_user.full_name}</a>\n\n"
        f"{m.text}"
    )
    btn_ok = InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",   callback_data=f"ok|{cb_id}")
    btn_no = InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"no|{cb_id}")
    ikb = InlineKeyboardMarkup(inline_keyboard=[[btn_ok, btn_no]])
    await bot.send_message(chat_id=MOD_CHAT_ID, text=caption, reply_markup=ikb)

    await m.answer("–°–ø–∞—Å–∏–±–æ! –ò–¥–µ—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ ‚úÖ", reply_markup=main_keyboard())
    await dp.storage.set_data(chat=m.chat.id, data={})  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º state

@dp.callback_query(F.data.startswith(("ok|", "no|")))
async def moderation(cb: CallbackQuery):
    verdict, cb_id = cb.data.split("|", 1)
    if cb_id not in pending:
        await cb.answer("–£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", show_alert=True)
        return
    user_id = pending.pop(cb_id)

    if verdict == "ok":
        text_to_user = "–í–∞—à–∞ –∏–¥–µ—è –ø—Ä–∏–Ω—è—Ç–∞! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º üíô"
        note = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ"
    else:
        text_to_user = "–°–ø–∞—Å–∏–±–æ, –Ω–æ –ø–æ–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–µ –º–æ–∂–µ–º üôè"
        note = "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
    try:
        await bot.send_message(user_id, text_to_user)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –ø–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–æ–¥-—á–∞—Ç–µ
    await cb.message.edit_reply_markup(reply_markup=None)
    await cb.message.reply(note)
    await cb.answer("–ì–æ—Ç–æ–≤–æ")

async def main():
    logging.info("Bot is starting...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
