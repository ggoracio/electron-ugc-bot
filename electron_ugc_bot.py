# electron_ugc_bot.py
import asyncio
import logging
import os
from typing import Dict

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 1.  –ù–ê–°–¢–†–û–ô–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_TOKEN         = os.getenv("BOT_TOKEN")
MODERATOR_CHAT_ID = int(os.getenv("MOD_CHAT_ID", 0))

logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(message)s")
bot = Bot(BOT_TOKEN, parse_mode=ParseMode.HTML)
dp  = Dispatcher()

MSG2USER: Dict[int, int] = {}          # id –∫–∞—Ä—Ç–æ—á–∫–∏ ‚ûú id –∞–≤—Ç–æ—Ä–∞

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 2.  –°–û–°–¢–û–Ø–ù–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class Form(StatesGroup):
    welcomed = State()
    choosing = State()
    writing  = State()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 3.  –ö–ù–û–ü–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def begin_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å", callback_data="begin")]  # ‚Üê –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        ]
    )

reply_kb = ReplyKeyboardMarkup(
    keyboard=[[
        KeyboardButton(text="üí° –ò–¥–µ—è"),   # ‚Üê –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        KeyboardButton(text="üìù –§–∏–¥–±–µ–∫")  # ‚Üê –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    ]],
    resize_keyboard=True
)

def restart_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü© –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ—â—ë –∏–¥–µ—é",  # ‚Üê –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                                  callback_data="restart")]
        ]
    )

def mod_inline(card_id: int, user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",  callback_data=f"approve:{card_id}:{user_id}")],  # ‚Üê –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            [InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–∞–≤–∫–∏",    callback_data=f"edit:{card_id}:{user_id}")],    # ‚Üê –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{card_id}:{user_id}")]   # ‚Üê –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        ]
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 4.  –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message(CommandStart())
async def cmd_start(m: types.Message, state: FSMContext):
    await state.clear()
    await m.answer(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è <b>–∏–¥–µ–µ–π</b> –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å <b>—Ñ–∏–¥–±–µ–∫</b>.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=begin_kb()
    )
    await state.set_state(Form.welcomed)

@dp.callback_query(F.data == "begin", Form.welcomed)
async def cb_begin(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=reply_kb)
    await state.set_state(Form.choosing)
    await cb.answer()

@dp.message(Form.choosing, F.text.in_(["üí° –ò–¥–µ—è", "üìù –§–∏–¥–±–µ–∫"]))
async def choose_type(m: types.Message, state: FSMContext):
    tag = "IDEA" if "–ò–¥–µ—è" in m.text else "FEEDBACK"
    await state.update_data(tag=tag)
    await m.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–∏–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî —á—Ç–æ —É–≥–æ–¥–Ω–æ.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(Form.writing)

@dp.message(Form.writing)
async def receive_any(m: types.Message, state: FSMContext):
    data = await state.get_data()
    tag  = data["tag"]

    media_types = {
        "photo", "video", "document", "audio",
        "animation", "video_note", "voice", "sticker"
    }
    if m.content_type in media_types:
        await bot.copy_message(
            chat_id=MODERATOR_CHAT_ID,
            from_chat_id=m.chat.id,
            message_id=m.message_id
        )

    meta_text = (
        f"<b>{tag}</b> –æ—Ç <a href='tg://user?id={m.from_user.id}'>{m.from_user.full_name}</a>\n\n"
        f"{m.caption or m.text or ''}"
    ).strip()

    card = await bot.send_message(
        MODERATOR_CHAT_ID,
        meta_text,
        reply_markup=mod_inline(0, m.from_user.id)   # –≤—Ä–µ–º–µ–Ω–Ω—ã–π id
    )
    await card.edit_reply_markup(reply_markup=mod_inline(card.message_id, m.from_user.id))
    MSG2USER[card.message_id] = m.from_user.id

    await m.answer(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é ‚úÖ",
        reply_markup=restart_kb()
    )
    await state.clear()

@dp.callback_query(F.data == "restart")
async def restart(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    await cb.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=reply_kb)
    await state.set_state(Form.choosing)

@dp.callback_query(F.data.regexp(r"^(approve|edit|reject):"))
async def moderation_action(cb: types.CallbackQuery):
    action, card_id, user_id = cb.data.split(":")
    user_id = int(user_id)

    if action == "approve":
        text = "–í–∞—à–∞ –∏–¥–µ—è –æ–¥–æ–±—Ä–µ–Ω–∞! üéâ"
    elif action == "edit":
        text = "–°–ø–∞—Å–∏–±–æ! –ï—Å—Ç—å –ø–∞—Ä–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–π –ø–æ –≤–∞—à–µ–π –∏–¥–µ–µ; –º—ã —Å–≤—è–∂–µ–º—Å—è –ø–æ–∑–∂–µ. ‚úèÔ∏è"
    else:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∏–¥–µ—è –Ω–µ –ø–æ–¥–æ—à–ª–∞. –ù–æ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å! ‚ùå"

    try:
        await bot.send_message(user_id, text, reply_markup=restart_kb())
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await cb.message.edit_reply_markup()
    await cb.answer("–ì–æ—Ç–æ–≤–æ!")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 5.  –ó–ê–ü–£–°–ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main():
    logging.info("Bot is starting‚Ä¶")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
