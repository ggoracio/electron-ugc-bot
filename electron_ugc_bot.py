"""
Telegram UGC‚Äë–±–æ—Ç @ElectronUGCbot

–°–∫–µ–ª–µ—Ç –±–æ—Ç–∞ –Ω–∞ aiogram v3.
–§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ /start ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –º–µ–Ω—é
‚Ä¢ /idea ‚Äì —Å–±–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏—Å—Ç–æ—Ä–∏–π
‚Ä¢ /photo ‚Äì —Å–±–æ—Ä —Ñ–æ—Ç–æ + –ø–æ–¥–ø–∏—Å–∏
‚Ä¢ /status ‚Äì –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —á–∞—Ç —Å inline‚Äë–∫–Ω–æ–ø–∫–∞–º–∏ ¬´‚úÖ –û–¥–æ–±—Ä–∏—Ç—å / ‚úèÔ∏è –ü—Ä–∞–≤–∫–∏ / ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å¬ª
‚Ä¢ /report ‚Äì —Ç–æ–ø –∞–≤—Ç–æ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

–ë–∞–∑–∞: SQLite (–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ PostgreSQL ‚Äì –∑–∞–º–µ–Ω–∏—Ç—å connection).
–ü–æ—Å–ª–µ –¥–µ–ø–ª–æ—è: –∑–∞–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏ ADMIN_CHAT_ID (—á–µ—Ä–µ–∑ Railway/Heroku).
"""
import os
import logging
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import (Message, CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup)
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram import html

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))  # ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —á–∞—Ç–∞

# --- DB ---
conn = sqlite3.connect("database.db")
cursor = conn.cursor()
cursor.execute(
    """
    CREATE TABLE IF NOT EXISTS users (
        tg_id INTEGER PRIMARY KEY,
        name TEXT,
        score INTEGER DEFAULT 0,
        joined TIMESTAMP
    );
    """
)
cursor.execute(
    """
    CREATE TABLE IF NOT EXISTS submissions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        tg_id INTEGER,
        type TEXT,
        content TEXT,
        file_id TEXT,
        status TEXT DEFAULT 'pending',
        ts TIMESTAMP
    );
    """
)
conn.commit()

# --- Bot / Dispatcher ---
logging.basicConfig(level=logging.INFO)
bot = Bot(BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()

def ensure_user(m: Message):
    cursor.execute("SELECT 1 FROM users WHERE tg_id=?", (m.from_user.id,))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO users (tg_id, name, joined) VALUES (?, ?, ?)",
            (m.from_user.id, m.from_user.full_name, datetime.utcnow()),
        )
        conn.commit()

# --- Keyboards ---
main_kb = (
    ReplyKeyboardBuilder()
    .add(*["/idea", "/photo", "/status"])
    .adjust(3)
    .as_markup(resize_keyboard=True)
)

def mod_kb(sub_id: int):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve:{sub_id}"),
                InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–∞–≤–∫–∏", callback_data=f"revise:{sub_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{sub_id}"),
            ]
        ]
    )

# --- Handlers ---
@router.message(Command("start"))
async def start_cmd(m: Message):
    ensure_user(m)
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ UGC‚Äë–±–æ—Ç <b>–≠–ª–µ–∫—Ç—Ä–æ–Ω</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é /idea\n‚Ä¢ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ /photo\n‚Ä¢ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–∫–∏ /status",
        reply_markup=main_kb,
    )

@router.message(Command("idea"))
async def idea_cmd(m: Message):
    ensure_user(m)
    await m.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤) –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    dp.message.middleware.register(CollectTextMiddleware())

class CollectTextMiddleware:  # –∂–¥—ë–º –ø–µ—Ä–≤–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async def __call__(self, handler, event, data):
        m: Message = event
        if m.text and not m.text.startswith("/"):
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            cursor.execute(
                "INSERT INTO submissions (tg_id, type, content, ts) VALUES (?,?,?,?)",
                (m.from_user.id, "text", m.text[:1000], datetime.utcnow()),
            )
            sub_id = cursor.lastrowid
            conn.commit()
            await m.answer("–°–ø–∞—Å–∏–±–æ! –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
            # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            await bot.send_message(
                ADMIN_CHAT_ID,
                f"<b>–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç {html.quote(m.from_user.full_name)}</b>\n{sub_id}: {html.quote(m.text[:500])}",
                reply_markup=mod_kb(sub_id),
            )
            return  # stop propagation
        await handler(event, data)

@router.message(Command("photo"))
async def photo_cmd(m: Message):
    ensure_user(m)
    await m.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).")

@router.message(F.photo)
async def handle_photo(m: Message):
    ensure_user(m)
    file_id = m.photo[-1].file_id
    caption = m.caption or ""
    cursor.execute(
        "INSERT INTO submissions (tg_id, type, content, file_id, ts) VALUES (?,?,?,?,?)",
        (m.from_user.id, "photo", caption[:500], file_id, datetime.utcnow()),
    )
    sub_id = cursor.lastrowid
    conn.commit()
    await m.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    await bot.send_photo(
        ADMIN_CHAT_ID,
        file_id,
        caption=f"<b>–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ—Ç {html.quote(m.from_user.full_name)}</b>\n{sub_id}: {html.quote(caption)}",
        reply_markup=mod_kb(sub_id),
    )

@router.message(Command("status"))
async def status_cmd(m: Message):
    ensure_user(m)
    cursor.execute("SELECT score FROM users WHERE tg_id=?", (m.from_user.id,))
    score = cursor.fetchone()[0]
    await m.answer(f"–£ –≤–∞—Å <b>{score}</b> –±–∞–ª–ª–æ–≤. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∫–ª–∞–¥!")

# --- Admin callbacks ---
@router.callback_query(F.data.startswith(tuple(["approve", "reject", "revise"])))
async def callbacks(cb: CallbackQuery):
    action, sub_id = cb.data.split(":")
    sub_id = int(sub_id)
    cursor.execute("SELECT tg_id, type FROM submissions WHERE id=?", (sub_id,))
    row = cursor.fetchone()
    if not row:
        await cb.answer("–£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        return
    user_id, sub_type = row
    if action == "approve":
        cursor.execute("UPDATE submissions SET status='approved' WHERE id=?", (sub_id,))
        cursor.execute("UPDATE users SET score = score + 5 WHERE tg_id=?", (user_id,))
        conn.commit()
        await bot.send_message(user_id, "üéâ –í–∞—à –º–∞—Ç–µ—Ä–∏–∞–ª –æ–¥–æ–±—Ä–µ–Ω –∏ —Å–∫–æ—Ä–æ –≤—ã–π–¥–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ!")
        await cb.message.edit_text(cb.message.html_text + "\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ")
    elif action == "reject":
        cursor.execute("UPDATE submissions SET status='rejected' WHERE id=?", (sub_id,))
        conn.commit()
        await bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ :)")
        await cb.message.edit_text(cb.message.html_text + "\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    elif action == "revise":
        cursor.execute("UPDATE submissions SET status='needs_edit' WHERE id=?", (sub_id,))
        conn.commit()
        await bot.send_message(user_id, "‚úèÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å–∏—Ç –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é /idea –∏–ª–∏ /photo.")
        await cb.message.edit_text(cb.message.html_text + "\n‚úèÔ∏è –ù—É–∂–Ω—ã –ø—Ä–∞–≤–∫–∏")
    await cb.answer("–ì–æ—Ç–æ–≤–æ")

# --- /report (admins only) ---
@router.message(Command("report"))
async def report_cmd(m: Message):
    if m.chat.id != ADMIN_CHAT_ID:
        return
    cursor.execute("SELECT name, score FROM users ORDER BY score DESC LIMIT 10")
    rows = cursor.fetchall()
    msg = "<b>TOP‚Äë10 –∞–≤—Ç–æ—Ä–æ–≤</b>\n" + "\n".join([f"{i+1}. {html.quote(n)} ‚Äî {s} –±–∞–ª–ª–æ–≤" for i, (n, s) in enumerate(rows)])
    await m.answer(msg)

# --- register & run ---
dp.include_router(router)

def main():
    dp.run_polling(bot)

if __name__ == "__main__":
    main()
