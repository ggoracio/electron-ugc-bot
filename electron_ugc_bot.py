# electron_ugc_bot.py
import os
import re
import logging
import asyncio

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from dotenv import load_dotenv   # pip install python-dotenv

# --------------------------------------------------------------------------- #
# 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

load_dotenv()                              # –±–µ—Ä–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env (Railway —Ç–æ–∂–µ –≤–∏–¥–∏—Ç)
BOT_TOKEN    = os.getenv("BOT_TOKEN")
MOD_CHAT_ID  = int(os.getenv("MOD_CHAT_ID", "0"))   # id —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤

logging.basicConfig(level=logging.INFO)
bot  = Bot(BOT_TOKEN, parse_mode=ParseMode.HTML)
dp   = Dispatcher(storage=MemoryStorage())          # –ø—Ä–æ—Å—Ç–µ–π—à–µ–µ FSM-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ

# –ø—Ä–æ—Å—Ç–∞—è ‚Äú–±–∞–∑–∞‚Äù ‚Äî –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–º–æ–¥–µ—Ä–∞—Ü–∏–∏ -> (user_id, tag).
PENDING: dict[int, tuple[int, str]] = {}

# --------------------------------------------------------------------------- #
# 2. –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã

main_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üí° –ò–¥–µ—è"),
               KeyboardButton(text="‚úâÔ∏è –§–∏–¥–±–µ–∫")]],
    resize_keyboard=True
)

again_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚Üª –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë")]],
    resize_keyboard=True
)

def mod_kb(user_id: int, tag: str):
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    cb_approve = f"approve:{user_id}:{tag}"
    cb_reject  = f"reject:{user_id}:{tag}"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",  callback_data=cb_approve),
         InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=cb_reject)]
    ])

# --------------------------------------------------------------------------- #
# 3. –•—ç–Ω–¥–ª–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@dp.message(CommandStart())
async def cmd_start(m: types.Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚§µÔ∏è",
        reply_markup=main_kb
    )

@dp.message(F.text.in_(["üí° –ò–¥–µ—è", "‚úâÔ∏è –§–∏–¥–±–µ–∫", "‚Üª –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë"]))
async def choose_type(m: types.Message, state: types.FSMContext):
    tag = "idea" if "–ò–¥–µ—è" in m.text else "feedback"
    await state.update_data(tag=tag)            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø
    await m.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç { '–∏–¥–µ–∏' if tag=='idea' else '—Ñ–∏–¥–±–µ–∫–∞' }:",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(~Command("start"))
async def receive_text(m: types.Message, state: types.FSMContext):
    data = await state.get_data()
    tag  = data.get("tag")
    if not tag:       # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª, –Ω–µ –≤—ã–±—Ä–∞–≤ —Ç–∏–ø
        await m.answer("–°–ø–µ—Ä–≤–∞ –≤—ã–±–µ—Ä–∏—Ç–µ <b>–ò–¥–µ—é</b> –∏–ª–∏ <b>–§–∏–¥–±–µ–∫</b>.", reply_markup=main_kb)
        return

    caption = f"<b>{'–ò–¥–µ—è' if tag=='idea' else '–§–∏–¥–±–µ–∫'}</b> –æ—Ç <a href='tg://user?id={m.from_user.id}'>{m.from_user.full_name}</a>\n\n{m.text}"
    sent = await bot.send_message(
        chat_id=MOD_CHAT_ID,
        text=caption,
        reply_markup=mod_kb(m.from_user.id, tag)
    )
    # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø–æ–Ω—è—Ç—å, –∫–æ–º—É –æ—Ç–≤–µ—á–∞—Ç—å
    PENDING[sent.message_id] = (m.from_user.id, tag)

    await m.answer(
        "–°–ø–∞—Å–∏–±–æ! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é ‚úÖ",
        reply_markup=again_kb
    )
    await state.clear()

# --------------------------------------------------------------------------- #
# 4. –•—ç–Ω–¥–ª–µ—Ä—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞

@dp.callback_query(F.data.regexp(r"^(approve|reject):(\d+):(\w+)$"))
async def mod_action(cq: types.CallbackQuery):
    action, user_id, tag = re.match(r"^(approve|reject):(\d+):(\w+)$", cq.data).groups()
    user_id = int(user_id)

    # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    status_text = "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ" if action == "approve" else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
    new_caption = cq.message.html_text + f"\n\n<b>{status_text}</b>"
    await cq.message.edit_text(new_caption)     # —É–±–µ—Ä—ë–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è
    await cq.answer("–ì–æ—Ç–æ–≤–æ")

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
    try:
        note = "‚úÖ –ú—ã –ø—Ä–∏–Ω—è–ª–∏ –≤–∞—à—É –∏–¥–µ—é. –°–ø–∞—Å–∏–±–æ!" if action == "approve" \
             else "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∏–¥–µ—è –Ω–µ –ø–æ–¥–æ—à–ª–∞."
        await bot.send_message(user_id, note, reply_markup=again_kb)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    # —á–∏—Å—Ç–∏–º ‚Äú–±–∞–∑—É‚Äù
    PENDING.pop(cq.message.message_id, None)

# --------------------------------------------------------------------------- #
# 5. –ó–∞–ø—É—Å–∫

if __name__ == "__main__":
    logging.info("Bot is starting‚Ä¶")
    asyncio.run(dp.start_polling(bot))
